#!/usr/bin/env node

// Sample command to render with interactivity:
//
// bin/tilebatch --serve.key=ISO2 --serve.layer=world --serve.fields=NAME \
//     --metadata.formatter="function(options,data) { return data.NAME }" \
//     http://mapbox.github.com/tilelive-mapnik/test/world.mml world.mbtiles

var _ = require('underscore'),
    sys = require('sys'),
    Batch = require('tilelive').Batch,
    argv = require('optimist')
        .default({
            storage: 'mbtiles',
            renderer: 'tilelive-mapnik'
        })
        .argv;

function table(fields) {
    if (!fields[0]) return;
    var lengths = fields[0].map(function(val, i) {
        return Math.max.apply(Math, fields.map(function(field) {
            return field[i].length;
        }));
    });
    fields.forEach(function(field) {
        console.warn(
            '  ' + field.map(function(val, i) {
                if (i >= lengths.length - 1) return val;
                return val + Array(lengths[i] - val.length + 1).join(' ');
            }).join('  ')
        );
    });
};

if (argv.help || argv._.length < 2) {
    sys.puts('Usage: tilebatch [OPTIONS]... <DATASOURCE> <FILE>');
    sys.puts('Renders tiles using DATASOURCE (url|xml|mml) into FILE.');
    sys.puts('');
    sys.puts('Options:');
    table([
        ['--storage', 'Storage backend. (Default: mbtiles)'],
        ['--renderer', 'Renderer backend. (Default: tilelive-mapnik)'],
        ['--batchsize', 'Tile rendering batch size. (Default: 100)'],
        ['--bbox', 'Bounding box to render. (Default: -180,-90,180,-90)'],
        ['--minzoom', 'Lowest zoom level to render. (Default: 0)'],
        ['--maxzoom', 'Highest zoom level to render. (Default: 4)'],
        ['--metadata.[KEY]', 'Metadata value. Example: --metadata.name=World'],
        ['--serve.[KEY]', 'Serve options value. Example: --serve.format=png'],
    ]);
    sys.puts('');
    sys.puts('Example:');
    sys.puts('  tilebatch http://mapbox.github.com/tilelive-mapnik/test/world.mml world.mbtiles');
    process.exit(1);
}

var storage,
    renderer;

try {
    storage = require(argv.storage);
} catch(e) {
    sys.puts('Storage backend ' + argv.storage + ' was not found.');
    process.exit(1);
}

try {
    renderer = require(argv.renderer);
} catch(e) {
    sys.puts('Renderer backend ' + argv.renderer + ' was not found.');
    process.exit(1);
}

argv.datasource = argv._[0];
argv.filepath = argv._[1];
argv.storage = storage;
argv.renderer = renderer;

// Collapse any dot flags into their respective objects.
_(argv).each(function(value, key) {
    var segments = key.split('.');
    if (segments.length === 2) {
        argv[segments[0]] = argv[segments[0]] || {};
        argv[segments[0]][segments[1]] = value;
        delete argv[key];
    }
});

// Exceptions, special handling.
argv.serve && argv.serve.fields && (argv.serve.fields = argv.serve.fields.split(','));
argv.bbox && (argv.bbox = argv.bbox.split(','));

var batch = new Batch(argv);
var printed = 0;

table([
    ['Datasource:', argv.datasource],
    ['Filepath:', argv.filepath],
    ['Zoom levels:', argv.minzoom + '-' + argv.maxzoom],
    ['Bounds:', argv.metadata.bounds],
    ['Render grids:', batch.grid]
]);
sys.puts('  00 --------------- 50 -------------- 100');
sys.print('  ');

batch.on('write', function(batch) {
    var progress = Math.floor(batch.tilesCurrent / batch.tilesTotal * 40);
    if (progress > printed) {
        sys.print((new Array(progress - printed + 1)).join('#'));
        printed = progress;
    }
});
batch.on('end', function(batch) {
    sys.puts('');
    sys.puts('  Total time:   '
        + parseInt((batch.timeEnd - batch.timeStart) * .001)
        + 's');
    sys.puts('');
});

batch.execute();
