gen:
  uri: bridge://
  xml:
    npm: ["osm-bright-source", "data.xml"]

c:
  uri: cassandra://
  params:
    cp: 127.0.0.1
    keyspace: v2
    repfactor: 1
    durablewrite: 0
    createIfMissing: 1

autogen:
   uri: autogen://
   params:
     generator: {ref: gen}
     storage: {ref: c}
    # Optional:
#     mingen: 10  # Only generate tiles if missing within this zoom range
     maxgen: 16
#     minstore: 10  # if generated, only store them if within this zoom range
     maxstore: 16

oz:
  uri: overzoom://
  params:
    source: {ref: autogen}

osm-intl:
  public: true
  formats: [png,json,headers,svg,jpeg]
  scales: [1.3, 1.5, 2, 2.6, 3]
  static: true
  maxheight: 1024
  maxwidth: 1024
  uri: vector://
  xml:
    npm: ["osm-bright-style", "project.xml"]
  xmlSetParams:
    source: {ref: oz}
  pbfsource: oz

osm:
  public: true
  formats: [png,json,headers,svg,jpeg]
  scales: [1.3, 1.5, 2, 2.6, 3]
  static: true
  maxheight: 2048
  maxwidth: 2048
  uri: vector://
  xml:
    npm: ["osm-bright-style", "project.xml"]
  xmlSetParams:
    source: {ref: oz}
  xmlExceptLayers: ['country_label', 'place_label', 'road_label']





gentest:
  uri: bridge://
  xml: /srv/osm-bright.tm2source/data.xml

ctest:
  uri: cassandra://
  params:
    cp: 127.0.0.1
    keyspace: vtest
    repfactor: 1
    durablewrite: 0
    createIfMissing: 1

autogentest:
   uri: autogen://
   params:
     generator: {ref: gentest}
     storage: {ref: ctest}
    # Optional:
#     mingen: 10  # Only generate tiles if missing within this zoom range
     maxgen: 16
#     minstore: 10  # if generated, only store them if within this zoom range
     maxstore: 16

oztest:
  uri: overzoom://
  params:
    source: {ref: autogentest}

test:
  public: true
  formats: [png,json,headers,svg,jpeg]
  scales: [1.3, 1.5, 2, 2.6, 3]
  static: true
  maxheight: 1024
  maxwidth: 1024
  uri: vector://
  xml: /srv/osm-bright.tm2/project.xml
  xmlSetParams:
    source: {ref: oztest}
  pbfsource: oztest


#gg:
#  public: true
#  uri: vector://
#  pbfsource: gen
#  formats: [png,json,headers,svg,jpeg]
#  maxscale: 4
#  xml:
#    npm: ["osm-bright-style", "project.xml"]
#  xmlSetParams:
#    source: {ref: gen}
#

# rasterSrc:
#   public: true
#   uri: bridge://
#   xml: /home/yurik/wmf/kartotherian/raster.tm2source/data.xml

# rr:
#   public: true
#   formats: [png,json,headers,svg,jpeg]
#   scales: [1.3, 1.5, 2, 2.6, 3]
#   static: true
#   maxheight: 1024
#   maxwidth: 1024
#   uri: vector://
#   xml: /home/yurik/wmf/kartotherian/raster.tm2/project.xml
#   xmlSetParams:
#     source: {ref: rasterSrc}

# dm:
#   public: true
#   uri: demultiplexer://
#   params:
#     source1: {ref: rasterSrc}
#     from1: 0
#     before1: 8


# mixer:
#   uri: layermixer://
#   params:
#     sources: [{ref: dm}, {ref: oz}]

# r:
#   public: true
#   formats: [png,json,headers,svg,jpeg]
#   scales: [1.3, 1.5, 2, 2.6, 3]
#   static: true
#   maxheight: 1024
#   maxwidth: 1024
#   uri: vector://
#   xml: /home/yurik/wmf/kartotherian/osm-bright.tm2/aa.xml
# #  xml: /home/yurik/wmf/kartotherian/raster.tm2/project.xml
#   xmlSetParams:
#     source: {ref: mixer}

# gen2:
#   uri: bridge://
#   xml:
#     npm: ["osm-bright-source", "data.xml"]
#   xmlLayers: []

# gen3:
#   uri: bridge://
#   xml:
#     npm: ["osm-bright-source", "data.xml"]
#   xmlLayers: [road, road_label]

# mixer:
#   uri: layermixer://
#   params:
#     sources: [{ref: gen2}, {ref: gen3}]

# mix:
#   public: true
#   uri: vector://
#   formats: [png,json,headers,svg,jpeg]
#   xml:
#     npm: ["osm-bright-style", "project.xml"]
#   xmlSetParams:
#     source: {ref: mixer}
